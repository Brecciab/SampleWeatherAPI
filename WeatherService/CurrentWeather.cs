using System;
using System.Text;
using Newtonsoft.Json;
using Newtonsoft.Json.Linq;

namespace WeatherService
{
    /// <summary>
    /// Holds the basic information being saved for the current weather returned from the service
    /// </summary>
    public class CurrentWeather
    {
        //DEVNOTE: not worried about the data type since writing to a file system
        public string ZipCode { get; set; }
        public string Condition { get; set; }
        public string Pressure { get; set; }

        // Currently the URl used has a setting for imperial (Fahrenheit)
        public string Temperature { get; set; }

        // This is represented in Degrees
        public string WindDirection { get; set; }
        public string WindSpeed { get; set; }
        public string Humidity { get; set; }
        public DateTime RetrievalTime { get; set; }

        // Error messages from the Weather Service
        public string Cod { get; set; }
        public string Message { get; set; }

        // Used to store any error message generated by our system.
        public string ErrorMessage { get; set; }

        public CurrentWeather()
        {

        }

        /// <summary>
        /// Parses the received json to the correct parameters
        /// </summary>
        /// <param name="inputJson"></param>
        public void ParseJson(string inputJson)
        {
            //DEVNOTE:  Due to the way the json from the weather api is 
            // written this seems like the best way to parse

            JObject jo = JObject.Parse(inputJson);
            // Assuming that if we are reading from the JSON that this is the retrieval time
            RetrievalTime = DateTime.UtcNow;

            Condition = (string)jo.SelectToken("weather..description");
            Pressure = (string)jo.SelectToken("main.pressure");
            Temperature = ConvertTemperature((string)jo.SelectToken("main.temp"));
            WindDirection = ParseWindDirection((string)jo.SelectToken("wind.deg"));
            WindSpeed = (string)jo.SelectToken("wind.speed");
            Humidity = (string)jo.SelectToken("main.humidity");

            // Should only map if there is a problem
            Cod = (string)jo.SelectToken("cod");
            Message = (string)jo.SelectToken("error") ?? (string)jo.SelectToken("message");

            //Message = (string)jo.SelectToken("message");
        }


        public string ConvertTemperature(string temperature)
        {
            // I was having problems using the unit URI parameter
            if (!string.IsNullOrEmpty(temperature))
            {
                if (double.TryParse(temperature, out double temp))
                {
                    temp = (temp - 273.15) * 9 / 5 + 32;
                    return temp.ToString();
                }
            }
            return "";
        }

        public string ParseWindDirection(string degreeInput)
        {
            if (Double.TryParse(degreeInput, out double degree))
            {
                if (degree > 337.5) return "Northerly";
                if (degree > 292.5) return "North Westerly";
                if (degree > 247.5) return "Westerly";
                if (degree > 202.5) return "South Westerly";
                if (degree > 157.5) return "Southerly";
                if (degree > 122.5) return "South Easterly";
                if (degree > 67.5) return "Easterly";
                if (degree > 22.5) { return "North Easterly"; }
                return "Northerly";
            }
            else
                return "Unknown - Original value (degreeInput)";

        }

        /// <summary>
        /// Output to write to the file system
        /// Normally would do this very differently
        /// </summary>
        /// <returns></returns>
        public string CreateLogLine()
        {
            StringBuilder log = new StringBuilder();

            //using reflection because values may be added
            //I would want to test if the the overhead of this is worth it
            foreach (var item in GetType().GetProperties())
            {
                try
                {
                    if (!string.IsNullOrEmpty(item.GetValue(this, null).ToString()))
                    {
                        log.Append(item.GetValue(this, null).ToString() + ",");
                    }
                    else
                    {
                        log.Append(",");
                    }
                }
                catch (Exception)
                {
                    //DEVNOTE: dirty, I know
                    log.Append(",");
                }
            }

            return log.ToString().TrimEnd(',');
        }
    }
}
